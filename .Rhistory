colnames(heart_dis_separated) <- colnames_split
View(heart_dis_separated)
for (i in seq_along(colnames_split)) {
# Access the current column
col_name <- colnames(heart_dis_separated)[i]
# Determine the number of splits (if space exists in any value of the column)
max_splits <- max(sapply(strsplit(heart_dis_separated[[col_name]], " "), length), na.rm = TRUE)
# Create new column names with the original column name included
new_colnames <- paste0(col_name, "_part", seq_len(max_splits))
# Separate the column and include new column names
heart_dis_separated <- heart_dis_separated %>%
separate(col = !!sym(col_name), into = new_colnames, sep = " ", fill = "right")
}
print(heart_dis_separated)
for (i in seq_along(colnames_split)) {
# Access the current column
col_name <- colnames(heart_dis_separated)[i]
# Get the split parts of the column name
split_parts <- colnames_split[[i]]
# Determine the number of splits (if space exists in any value of the column)
max_splits <- max(sapply(strsplit(heart_dis_separated[[col_name]], " "), length), na.rm = TRUE)
# Generate new column names using the split parts of the original column name
new_colnames <- paste(split_parts, seq_len(max_splits), sep = "_")
# Separate the column and assign the new column names
heart_dis_separated <- heart_dis_separated %>%
separate(col = !!sym(col_name), into = new_colnames, sep = " ", fill = "right")
}
View(heart_dis_separated)
# View the resulting dataframe
print(heart_dis_separated)
data <- read.csv("data/heart_disease_dataset.csv")
# Split the column names by dots
split_colnames <- strsplit(colnames(data), "\\.")
# Flatten the split names into unique variable parts
new_colnames <- unlist(split_colnames)
# Create a new data frame with appropriate dimensions
data <- data.frame(matrix(ncol = length(new_colnames), nrow = nrow(data)))
colnames(data) <- new_colnames
# Assign each value to the corresponding variable
for (i in seq_along(split_colnames)) {
variable_parts <- split_colnames[[i]]
for (j in seq_along(variable_parts)) {
data[[variable_parts[j]]] <- data[[i]]
}
}
data
file_path <- "data/heart_disease_dataset.csv"
data <- read.table(file_path, sep = " ", header = TRUE)
file_path <- "data/heart_disease_dataset.csv"
data <- read.table(file_path, sep = " ", header = TRUE)
# Split the column names by dots
split_colnames <- strsplit(colnames(data), "\\.")
View(data)
file_path <- "data/heart_disease_dataset.csv"
data <- read.table(file_path, sep = " ", header = TRUE)
file_path <- "data/heart_disease_dataset.csv"
data <- read.table(file_path, sep = " ", header = TRUE)
View(data)
summary(data)
data$sex <- factor(data$sex)
summary(data)
data$cp <- factor(data$cp)
summary(data)
rownames(data) <- data$patient_id
data <- data[1:14]
summary(data)
categoricals <- c("sex", "cp", "restecg", "exang", "slope", "thal", "num")
for i in (categoricals){
for (col in categoricals) {
data[[col]] <- factor(data[[col]])
}
summary(data)
categoricals <- c("sex", "cp", "restecg", "exang", "slope", "ca", "thal", "num")
for (col in categoricals) {
data[[col]] <- factor(data[[col]])
}
summary(data)
data <- read.table(file_path, sep = " ", header = TRUE, na.strings = "?")
head(data)
rownames(data) <- data$patient_id
data <- data[1:14]
categoricals <- c("sex", "cp", "restecg", "exang", "slope", "ca", "thal", "num")
for (col in categoricals) {
data[[col]] <- factor(data[[col]])
}
summary(data)
library(naniar)
vis_miss(data)
vis_miss(data[11:14])
vis_miss(data)
vis_miss(data[11:14])
dim(data)
file_path <- "data/heart_disease_dataset.csv"
data <- read.table(file_path, sep = " ", header = TRUE, na.strings = "?")
dim(data)
head(data)
View(data)
vis_miss(data[11:14])
summary(data)
categoricals <- c("sex", "cp", "restecg", "exang", "slope", "ca", "thal", "num")
for (col in categoricals) {
data[[col]] <- factor(data[[col]])
}
dim(data) # 303 records (rows); 15 fields (cols)
head(data)
vis_miss(data[11:14])
summary(data)
file_path <- "data/cov_19_cytokyne.XLSX"
install.packages("readxl")
#setwd("/Users/claudiavicentecomorera/Desktop/MSc/DMI/assignment-1-claudiavicente")
install.packages("naniar")
library(readxl)
data_ck <- read_excel("file_path")
file_path <- "data/cov_19_cytokyne.XLSX"
data_ck <- read_excel("file_path")
data_ck <- read_excel(file_path)
data_ck <- read_excel(file_path)
setwd("/Users/claudiavicentecomorera/Desktop/MSc/DMI/assignment-1-claudiavicente")
data_ck <- read_excel(file_path)
file_path <- "data/heart_disease_dataset.csv"
file_path <- "data/heart_disease_dataset.csv"
data_hd <- read.table(file_path, sep = " ", header = TRUE, na.strings = "?")
file_path <- "data/cov_19_cytokyne.XLSX"
data_ck <- read_excel(file_path)
file_path <- "data/cov_19_cytokyne.xlsx"
data_ck <- read_excel(file_path)
getwd()
file_path <- "/data/cov_19_cytokyne.xlsx"
data_ck <- read_excel(file_path)
file_path <- "data/cov_19_cytokyne.xlsx"
data_ck <- read_excel(file_path)
file_path <- "data/cov_19_cytokine.xlsx"
data_ck <- read_excel(file_path)
View(data_ck)
data_ck <- read_excel(file_path, na = "NI")
View(data_ck)
data_ck <- read_excel(file_path)
data_ck <- read_excel(file_path, na = "NI")
data_ck <- read_excel(file_path, na = "NI", skip = 1)
str(data_ck)
as.numeric(data_ck[2:])
data_ck[2:ncol(data_ck)] <- lapply(data_ck[2:ncol(data_ck)], as.numeric)
rownames(data_ck) <- data_ck[[1]]  # Assign the first column as rownames
str(data_ck) # chech data structure
install.packages("openxlsx")    # To read and write Excel files with formatting
library(openxlsx)    # To read and write Excel files with formatting
data_ck <- read.xlsx(file_path, startRow = 2, rowNames = TRUE, na.strings = "NI", fillMergedCells = TRUE)
data_ck <- read.xlsx(file_path, startRow = 2, na.strings = "NI", fillMergedCells = TRUE)
# Formatting
colnames(data_ck)[1] <- "ID"
rownames(data_ck) <- data_ck[[1]]
s_data_ck <- data_ck[, c(1, 3:14)]
View(s_data_ck)
s_data_ck[2:ncol(s_data_ck)] <- lapply(s_data_ck[2:ncol(s_data_ck)], as.numeric)
str(data_ck) # chech data structure
s_data_ck <- data_ck[, c(1, 3:14)]
s_data_ck <- data_ck[, c(1, 3:14)]
vis_miss(s_data_ck)
s_data_ck[2:ncol(s_data_ck)] <- lapply(s_data_ck[2:ncol(s_data_ck)], as.numeric)
vis_miss(s_data_ck)
s_data_ck1 <- data_ck[, c(1, 3:14)]
s_data_ck2[2:ncol(s_data_ck)] <- lapply(s_data_ck[2:ncol(s_data_ck)], as.numeric)
s_data_ck2 <- s_data_ck1
s_data_ck2[2:ncol(s_data_ck2)] <- lapply(s_data_ck2[2:ncol(s_data_ck2)], as.numeric)
rows_with_na_in_df1 <- which(is.na(s_data_ck1$IL.6) & !is.na(s_data_ck2$IL.6))
rows_with_na_in_df1
# Extract those rows
s_data_ck1[rows_with_na_in_df1, ]
s_data_ck2[rows_with_na_in_df1, ]
rows_with_na_in_df1 <- which(is.na(s_data_ck1$`IL-6`) & !is.na(s_data_ck2$`IL-6`))
rows_with_na_in_df1
vis_miss(s_data_ck2)
rows_with_na_in_df1 <- which(is.na(s_data_ck1$`IL-6`) & !is.na(s_data_ck2$`IL-6`))
# Extract those rows
s_data_ck1[rows_with_na_in_df1, ]
s_data_ck2[rows_with_na_in_df1, ]
rows_with_na_in_df1 <- which(is.na(s_data_ck1$`IL-6`) & !is.na(s_data_ck2$`IL-6`))
rows_with_na_in_df1 <- which(is.na(s_data_ck1$`IL-6`) && !is.na(s_data_ck2$`IL-6`))
rows_with_na_in_df1
rows_with_na_in_df1 <- which(!is.na(s_data_ck1$`IL-6`) & is.na(s_data_ck2$`IL-6`))
rows_with_na_in_df1
# Extract those rows
s_data_ck1[rows_with_na_in_df1, ]
s_data_ck2[rows_with_na_in_df1, ]
# Extract those rows
s_data_ck1[rows_with_na_in_df1, ]
data_ck <- read.xlsx(file_path, startRow = 2, na.strings = c("NI", "ND"), fillMergedCells = TRUE)
str(data_ck) # chech data structure
# Formatting
colnames(data_ck)[1] <- "ID"
s_data_ck1 <- data_ck[, c(1, 3:14)]
vis_miss(s_data_ck)
s_data_ck2 <- s_data_ck1
s_data_ck2[2:ncol(s_data_ck2)] <- lapply(s_data_ck2[2:ncol(s_data_ck2)], as.numeric)
vis_miss(s_data_ck2)
vis_miss(s_data_ck1)
str(s_data_ck) # chech data structure
install.packages("pheatmap")
# Remove the non-numeric 'ID' column
s_data_ck_numeric <- s_data_ck[, -1]
# Replace NA values with 0 (you can choose another method if you prefer, e.g., mean imputation)
s_data_ck_numeric[is.na(s_data_ck_numeric)] <- 0
# Generate the heatmap with hierarchical clustering
pheatmap(s_data_ck_numeric,
main = "Heatmap of Cytokine Levels with Hierarchical Clustering",
clustering_distance_rows = "euclidean",  # Euclidean distance for rows
clustering_distance_cols = "euclidean",  # Euclidean distance for columns
clustering_method = "complete",          # Complete linkage clustering
color = colorRampPalette(c("white", "blue"))(50),  # Color gradient
show_rownames = TRUE,                    # Show row names (samples)
show_colnames = TRUE,                    # Show column names (cytokines)
scale = "row",                           # Scale the rows (normalizing by row)
fontsize = 10,                           # Adjust font size for labels
treeheight_row = 50,                     # Height of row dendrogram
treeheight_col = 50)                     # Height of column dendrogram
# Assuming s_data_ck is your data frame
library(pheatmap)
# Generate the heatmap with hierarchical clustering
pheatmap(s_data_ck_numeric,
main = "Heatmap of Cytokine Levels with Hierarchical Clustering",
clustering_distance_rows = "euclidean",  # Euclidean distance for rows
clustering_distance_cols = "euclidean",  # Euclidean distance for columns
clustering_method = "complete",          # Complete linkage clustering
color = colorRampPalette(c("white", "blue"))(50),  # Color gradient
show_rownames = TRUE,                    # Show row names (samples)
show_colnames = TRUE,                    # Show column names (cytokines)
scale = "row",                           # Scale the rows (normalizing by row)
fontsize = 10,                           # Adjust font size for labels
treeheight_row = 50,                     # Height of row dendrogram
treeheight_col = 50)                     # Height of column dendrogram
# Generate the heatmap with hierarchical clustering
pheatmap(s_data_ck_numeric,
main = "Heatmap of Cytokine Levels with Hierarchical Clustering",
# Complete linkage clustering
color = colorRampPalette(c("white", "blue"))(50),  # Color gradient
show_rownames = TRUE,                    # Show row names (samples)
show_colnames = TRUE,                    # Show column names (cytokines)
scale = "row",                           # Scale the rows (normalizing by row)
fontsize = 10,                           # Adjust font size for labels
treeheight_row = 50,                     # Height of row dendrogram
treeheight_col = 50)                     # Height of column dendrogram
# Generate the heatmap with hierarchical clustering
pheatmap(s_data_ck_numeric,
main = "Heatmap of Cytokine Levels with Hierarchical Clustering",
# Complete linkage clustering
color = colorRampPalette(c("white", "blue"))(50),  # Color gradient
show_rownames = TRUE,                    # Show row names (samples)
show_colnames = TRUE,                    # Show column names (cytokines)
scale = "row",                           # Scale the rows (normalizing by row)
fontsize = 10)                     # Height of column dendrogram
View(s_data_ck_numeric)
# Replace NA values with 0 (you can choose another method if you prefer, e.g., mean imputation)
s_data_ck_numeric[!is.finite(s_data_ck_numeric)] <- NA
# Replace NA values with 0 (you can choose another method if you prefer, e.g., mean imputation)
s_data_ck_numeric[!is.finite(s_data_ck_numeric)] <- NA
s_data_ck <- data_ck[, c(3:14)]
s_data_ck[2:ncol(s_data_ck)] <- lapply(s_data_ck[2:ncol(s_data_ck)], as.numeric)
s_data_ck
summary(s_data_ck)
install.packages("ComplexHeatmap") # Alternative heatmap package with more flexibility
library(ComplexHeatmap)
BiocManager::install("ComplexHeatmap") # Alternative heatmap package with more flexibility
library(ComplexHeatmap)
# Create heatmap with hierarchical clustering
Heatmap(your_data,
cluster_rows = TRUE,
cluster_columns = TRUE,
na_col = "gray",   # Set color for NAs
show_row_names = TRUE,
show_column_names = TRUE)
# Create heatmap with hierarchical clustering
Heatmap(s_data_ck,
cluster_rows = TRUE,
cluster_columns = TRUE,
na_col = "gray",   # Set color for NAs
show_row_names = TRUE,
show_column_names = TRUE)
# Create heatmap with hierarchical clustering
Heatmap(s_data_ck,
na_col = "gray",   # Set color for NAs
show_row_names = TRUE,
show_column_names = TRUE)
View(s_data_ck1)
summary(s_data_ck)
s_data_ck <- data_ck[, c(1, 3:14)]
s_data_ck[2:ncol(s_data_ck)] <- lapply(s_data_ck[2:ncol(s_data_ck)], as.numeric)
summary(s_data_ck)
str(s_data_ck) # chech data structure
View(data_ck)
# Step 1: Load libraries and the dataset
library(caret)        # For data preprocessing and scaling
# Step 1: Load libraries and the dataset
# Install the required packages
install.packages(c("caret", "RColorBrewer", "ggfortify", "cluster", "ggpubr", "survival", "pdftools"))
knitr::opts_chunk$set(echo = TRUE)
library(caret)        # For data preprocessing and scaling
library(cluster)      # For clustering algorithms
library(caret)        # For data preprocessing and scaling
install.packages("lava")
install.packages("lava")
BiocManager::install("lava")
library(caret)        # For data preprocessing and scaling
library(caret)        # For data preprocessing and scaling
# Assuming your dataset is called `df` (replace with actual data load step)
# Example: df <- read.csv("your_data.csv")
df <- s_data_ck
# Step 2: Prepare the data - Calculate median values for each patient
df_clean <- df %>%
select(-ID) %>%  # Remove the patient ID column
drop_na()         # Remove rows with missing values (can be adjusted)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# Step 2: Prepare the data - Calculate median values for each patient
df_clean <- df %>%
select(-ID) %>%  # Remove the patient ID column
drop_na()         # Remove rows with missing values (can be adjusted)
library(dplyr)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Step 2: Prepare the data - Calculate median values for each patient
df_clean <- df %>%
select(-ID) %>%  # Remove the patient ID column
drop_na()         # Remove rows with missing values (can be adjusted)
# Install tidyr if it is not installed yet
install.packages("tidyr")
# Load the tidyr package
library(tidyr)
# Step 2: Prepare the data - Calculate median values for each patient
df_clean <- df %>%
select(-ID) %>%  # Remove the patient ID column
drop_na()         # Remove rows with missing values (can be adjusted)
# Calculate the median for each cytokine per patient (i.e., row-wise median)
df_median <- apply(df_clean, 1, median, na.rm = TRUE)
df_median <- t(df_median) # Transpose the median result back to a data frame
# Step 3: Standardize the data
df_scaled <- scale(df_median)
# Step 4: Compute dissimilarity matrix using Euclidean distance
dissimilarity_matrix <- dist(df_scaled, method = "euclidean")
# Step 5: Apply Hierarchical Clustering (HC)
hc <- hclust(dissimilarity_matrix, method = "complete")
dissimilarity_matrix
# Load necessary packages
library(dplyr)
# Calculate the median for each cytokine per patient (grouped by ID)
df_median <- df %>%
select(-ID) %>%         # Remove the ID column for median calculation
group_by(ID) %>%        # Group by patient ID
summarise(across(everything(), median, na.rm = TRUE))  # Calculate median for each cytokine per patient
df
View(df)
# Calculate the median for each cytokine per patient (grouped by ID)
df_median <- df %>%
select(-ID) %>%         # Remove the ID column for median calculation
group_by(ID) %>%        # Group by patient ID
summarise(across(everything(), median, na.rm = TRUE))  # Calculate median for each cytokine per patient
# Calculate the median for each cytokine per patient (grouped by ID)
df_median <- df %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
summary(s_data_ck)
# Calculate the median for each cytokine per patient (grouped by ID)
df_median <- s_data_ck %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
# Formatting
colnames(data_ck)[1] <- "ID"
s_data_ck <- data_ck[, c(1, 3:14)]
s_data_ck[2:ncol(s_data_ck)] <- lapply(s_data_ck[2:ncol(s_data_ck)], as.numeric)
summary(s_data_ck)
# Calculate the median for each cytokine per patient (grouped by ID)
df_median <- s_data_ck %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
# Calculate the median for each cytokine per patient (grouped by ID)
df_median <- df %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
# Check column names to see if there's any extra space or special character
colnames(s_data_ck)
# Calculate the median for each cytokine per patient (grouped by ID)
# Clean column names by removing special characters (if any) and trimming extra spaces
colnames(s_data_ck) <- gsub("[^[:alnum:]_]", "", colnames(s_data_ck))
colnames(s_data_ck)
df_median <- s_data_ck %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
# Calculate the median for each cytokine per patient (grouped by ID)
# Clean column names by removing special characters (if any) and trimming extra spaces
# Trim leading and trailing spaces from the ID column
s_data_ck$ID <- trimws(s_data_ck$ID)
df_median <- s_data_ck %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
# Check the structure of the data
str(s_data_ck)
unique(s_data_ck$ID)
# Calculate the median for each cytokine per patient (grouped by ID)
# Clean column names by removing special characters (if any) and trimming extra spaces
# Trim leading and trailing spaces from the ID column
# Trim spaces and ensure the 'ID' column is a character
s_data_ck$ID <- trimws(as.character(s_data_ck$ID))
df_median <- s_data_ck %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
s_data_ck$ID <- gsub("HSDJ", "HSJD", s_data_ck$ID) # Fix the typo in the 'ID' column
# Calculate the median for each cytokine per patient (grouped by ID)
df_median <- s_data_ck %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
# Formatting
colnames(data_ck)[1] <- "ID"
s_data_ck <- data_ck[, c(1, 3:14)]
s_data_ck[2:ncol(s_data_ck)] <- lapply(s_data_ck[2:ncol(s_data_ck)], as.numeric)
summary(s_data_ck)
s_data_ck$ID <- trimws(as.character(s_data_ck$ID)) # Trim spaces and ensure the 'ID' column is a character
s_data_ck$ID <- gsub("HSDJ", "HSJD", s_data_ck$ID) # Fix the typo in the 'ID' column
colnames(s_data_ck) <- gsub("[^[:alnum:]_]", "", colnames(s_data_ck)) #remove non ascii chars
# Calculate the median for each cytokine per patient (grouped by ID)
df_median <- s_data_ck %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
df_median <- s_data_ck %>%
group_by(ID) %>%                      # Group by patient ID
summarise(across(-ID, median, na.rm = TRUE))  # Calculate median for all columns except 'ID'
# Calculate the median for each cytokine per patient (grouped by ID)
df_median <- s_data_ck %>%
group_by(ID) %>%
summarise(across(.cols = -ID, .fns = ~ median(.x, na.rm = TRUE)))  # Calculate median for all columns except 'ID'
df_median <- s_data_ck %>%
group_by(ID) %>%
summarise(across(.cols = everything(), .fns = ~ median(.x, na.rm = TRUE)))  # Apply median across all columns
df_median
View(df_median)
# View the resulting dataframe with the median cytokine values
df_median_scaled <- df_median %>%
select(-ID) %>%
scale() %>%
as.data.frame()
# Add the ID back as row names for easier labeling
rownames(df_median_scaled) <- df_median$ID
# Create the heatmap
pheatmap(df_median_scaled,
cluster_rows = TRUE,       # Cluster rows (patients)
cluster_cols = TRUE,       # Cluster columns (cytokines)
show_rownames = FALSE,     # Hide patient names for better readability
show_colnames = TRUE,      # Show cytokine names
color = colorRampPalette(c("blue", "white", "red"))(50),  # Color scale from blue to red
scale = "none",            # Don't scale the heatmap again, since we've already scaled
main = "Cytokine Median Levels Heatmap")  # Title of the heatmap
# Create the heatmap
library(pheatmap)
pheatmap(df_median_scaled,
cluster_rows = TRUE,       # Cluster rows (patients)
cluster_cols = TRUE,       # Cluster columns (cytokines)
show_rownames = FALSE,     # Hide patient names for better readability
show_colnames = TRUE,      # Show cytokine names
color = colorRampPalette(c("blue", "white", "red"))(50),  # Color scale from blue to red
scale = "none",            # Don't scale the heatmap again, since we've already scaled
main = "Cytokine Median Levels Heatmap")  # Title of the heatmap
pheatmap(df_median_scaled,
cluster_rows = TRUE,       # Cluster rows (patients)
cluster_cols = TRUE,       # Cluster columns (cytokines)
show_rownames = FALSE,     # Hide patient names for better readability
show_colnames = TRUE,      # Show cytokine names
color = colorRampPalette(c("#fff", "#993404"))(50),  # Color scale from blue to red
scale = "none",            # Don't scale the heatmap again, since we've already scaled
main = "Cytokine Median Levels Heatmap")  # Title of the heatmap
pheatmap(df_median,
cluster_rows = TRUE,       # Cluster rows (patients)
cluster_cols = TRUE,       # Cluster columns (cytokines)
show_rownames = FALSE,     # Hide patient names for better readability
show_colnames = TRUE,      # Show cytokine names
color = colorRampPalette(c("#fff", "#993404"))(50),  # Color scale from blue to red
scale = "none",            # Don't scale the heatmap again, since we've already scaled
main = "Cytokine Median Levels Heatmap")  # Title of the heatmap
file_path <- "data/cov_19_metadata.xlsx"
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"), fillMergedCells =
file_path <- "data/cov_19_metadata.xlsx"
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"), fillMergedCells = , fillMergedCells = TRUE)
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"), fillMergedCells = TRUE)
install.packages("openxlsx")
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"), fillMergedCells = TRUE)
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"), fillMergedCells = TRUE)
file_path <- "data/cov_19_metadata.xlsx"
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"), fillMergedCells = TRUE)
library(openxlsx)
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"), fillMergedCells = TRUE)
data_meta
data_meta
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"))
rownames(data_meta) <- data_meta$ID
data_meta
library(dplyr)
data_meta <- data_meta %>% distinct()
data_meta <- data_meta %>%
group_by(id) %>%
filter(n() == 1) %>%
ungroup()
data_meta <- data_meta %>%
group_by(ID) %>%
filter(n() == 1) %>%
ungroup()
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"))
data_meta <- data_meta %>% distinct()
data_meta <- read.xlsx(file_path, sheet = 1, startRow = 2, na.strings = c("NI", "ND"))
data_meta <- data_meta %>% distinct()
data_meta <- data_meta %>%
group_by(ID) %>%
filter(n() == 1) %>%
ungroup()
